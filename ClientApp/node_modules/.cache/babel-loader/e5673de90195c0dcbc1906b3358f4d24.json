{"ast":null,"code":"var _jsxFileName = \"/Users/skylarsmith/PermitToWorkEPF/ClientApp/src/components/api-authorization/Logout.js\";\nimport React from 'react';\nimport { Component } from 'react';\nimport authService from './AuthorizeService';\nimport { AuthenticationResultStatus } from './AuthorizeService';\nimport { QueryParameterNames, LogoutActions, ApplicationPaths } from './ApiAuthorizationConstants'; // The main responsibility of this component is to handle the user's logout process.\n// This is the starting point for the logout process, which is usually initiated when a\n// user clicks on the logout button on the LoginMenu component.\n\nexport class Logout extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      message: undefined,\n      isReady: false,\n      authenticated: false\n    };\n  }\n\n  componentDidMount() {\n    const action = this.props.action;\n\n    switch (action) {\n      case LogoutActions.Logout:\n        if (!!window.history.state.state.local) {\n          this.logout(this.getReturnUrl());\n        } else {\n          // This prevents regular links to <app>/authentication/logout from triggering a logout\n          this.setState({\n            isReady: true,\n            message: \"The logout was not initiated from within the page.\"\n          });\n        }\n\n        break;\n\n      case LogoutActions.LogoutCallback:\n        this.processLogoutCallback();\n        break;\n\n      case LogoutActions.LoggedOut:\n        this.setState({\n          isReady: true,\n          message: \"You successfully logged out!\"\n        });\n        break;\n\n      default:\n        throw new Error(`Invalid action '${action}'`);\n    }\n\n    this.populateAuthenticationState();\n  }\n\n  render() {\n    const _this$state = this.state,\n          isReady = _this$state.isReady,\n          message = _this$state.message;\n\n    if (!isReady) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      });\n    }\n\n    if (!!message) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, message);\n    } else {\n      const action = this.props.action;\n\n      switch (action) {\n        case LogoutActions.Logout:\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 56\n            },\n            __self: this\n          }, \"Processing logout\");\n\n        case LogoutActions.LogoutCallback:\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 58\n            },\n            __self: this\n          }, \"Processing logout callback\");\n\n        case LogoutActions.LoggedOut:\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 60\n            },\n            __self: this\n          }, message);\n\n        default:\n          throw new Error(`Invalid action '${action}'`);\n      }\n    }\n  }\n\n  async logout(returnUrl) {\n    const state = {\n      returnUrl\n    };\n    const isauthenticated = await authService.isAuthenticated();\n\n    if (isauthenticated) {\n      const result = await authService.signOut(state);\n\n      switch (result.status) {\n        case AuthenticationResultStatus.Redirect:\n          break;\n\n        case AuthenticationResultStatus.Success:\n          await this.navigateToReturnUrl(returnUrl);\n          break;\n\n        case AuthenticationResultStatus.Fail:\n          this.setState({\n            message: result.message\n          });\n          break;\n\n        default:\n          throw new Error(\"Invalid authentication result status.\");\n      }\n    } else {\n      this.setState({\n        message: \"You successfully logged out!\"\n      });\n    }\n  }\n\n  async processLogoutCallback() {\n    const url = window.location.href;\n    const result = await authService.completeSignOut(url);\n\n    switch (result.status) {\n      case AuthenticationResultStatus.Redirect:\n        // There should not be any redirects as the only time completeAuthentication finishes\n        // is when we are doing a redirect sign in flow.\n        throw new Error('Should not redirect.');\n\n      case AuthenticationResultStatus.Success:\n        await this.navigateToReturnUrl(this.getReturnUrl(result.state));\n        break;\n\n      case AuthenticationResultStatus.Fail:\n        this.setState({\n          message: result.message\n        });\n        break;\n\n      default:\n        throw new Error(\"Invalid authentication result status.\");\n    }\n  }\n\n  async populateAuthenticationState() {\n    const authenticated = await authService.isAuthenticated();\n    this.setState({\n      isReady: true,\n      authenticated\n    });\n  }\n\n  getReturnUrl(state) {\n    const params = new URLSearchParams(window.location.search);\n    const fromQuery = params.get(QueryParameterNames.ReturnUrl);\n\n    if (fromQuery && !fromQuery.startsWith(`${window.location.origin}/`)) {\n      // This is an extra check to prevent open redirects.\n      throw new Error(\"Invalid return url. The return url needs to have the same origin as the current page.\");\n    }\n\n    return state && state.returnUrl || fromQuery || `${window.location.origin}${ApplicationPaths.LoggedOut}`;\n  }\n\n  navigateToReturnUrl(returnUrl) {\n    return window.location.replace(returnUrl);\n  }\n\n}","map":{"version":3,"sources":["/Users/skylarsmith/PermitToWorkEPF/ClientApp/src/components/api-authorization/Logout.js"],"names":["React","Component","authService","AuthenticationResultStatus","QueryParameterNames","LogoutActions","ApplicationPaths","Logout","constructor","props","state","message","undefined","isReady","authenticated","componentDidMount","action","window","history","local","logout","getReturnUrl","setState","LogoutCallback","processLogoutCallback","LoggedOut","Error","populateAuthenticationState","render","returnUrl","isauthenticated","isAuthenticated","result","signOut","status","Redirect","Success","navigateToReturnUrl","Fail","url","location","href","completeSignOut","params","URLSearchParams","search","fromQuery","get","ReturnUrl","startsWith","origin","replace"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Component } from 'react';\nimport authService from './AuthorizeService';\nimport { AuthenticationResultStatus } from './AuthorizeService';\nimport { QueryParameterNames, LogoutActions, ApplicationPaths } from './ApiAuthorizationConstants';\n\n// The main responsibility of this component is to handle the user's logout process.\n// This is the starting point for the logout process, which is usually initiated when a\n// user clicks on the logout button on the LoginMenu component.\nexport class Logout extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            message: undefined,\n            isReady: false,\n            authenticated: false\n        };\n    }\n\n    componentDidMount() {\n        const action = this.props.action;\n        switch (action) {\n            case LogoutActions.Logout:\n                if (!!window.history.state.state.local) {\n                    this.logout(this.getReturnUrl());\n                } else {\n                    // This prevents regular links to <app>/authentication/logout from triggering a logout\n                    this.setState({ isReady: true, message: \"The logout was not initiated from within the page.\" });\n                }\n                break;\n            case LogoutActions.LogoutCallback:\n                this.processLogoutCallback();\n                break;\n            case LogoutActions.LoggedOut:\n                this.setState({ isReady: true, message: \"You successfully logged out!\" });\n                break;\n            default:\n                throw new Error(`Invalid action '${action}'`);\n        }\n\n        this.populateAuthenticationState();\n    }\n\n    render() {\n        const { isReady, message } = this.state;\n        if (!isReady) {\n            return <div></div>\n        }\n        if (!!message) {\n            return (<div>{message}</div>);\n        } else {\n            const action = this.props.action;\n            switch (action) {\n                case LogoutActions.Logout:\n                    return (<div>Processing logout</div>);\n                case LogoutActions.LogoutCallback:\n                    return (<div>Processing logout callback</div>);\n                case LogoutActions.LoggedOut:\n                    return (<div>{message}</div>);\n                default:\n                    throw new Error(`Invalid action '${action}'`);\n            }\n        }\n    }\n\n    async logout(returnUrl) {\n        const state = { returnUrl };\n        const isauthenticated = await authService.isAuthenticated();\n        if (isauthenticated) {\n            const result = await authService.signOut(state);\n            switch (result.status) {\n                case AuthenticationResultStatus.Redirect:\n                    break;\n                case AuthenticationResultStatus.Success:\n                    await this.navigateToReturnUrl(returnUrl);\n                    break;\n                case AuthenticationResultStatus.Fail:\n                    this.setState({ message: result.message });\n                    break;\n                default:\n                    throw new Error(\"Invalid authentication result status.\");\n            }\n        } else {\n            this.setState({ message: \"You successfully logged out!\" });\n        }\n    }\n\n    async processLogoutCallback() {\n        const url = window.location.href;\n        const result = await authService.completeSignOut(url);\n        switch (result.status) {\n            case AuthenticationResultStatus.Redirect:\n                // There should not be any redirects as the only time completeAuthentication finishes\n                // is when we are doing a redirect sign in flow.\n                throw new Error('Should not redirect.');\n            case AuthenticationResultStatus.Success:\n                await this.navigateToReturnUrl(this.getReturnUrl(result.state));\n                break;\n            case AuthenticationResultStatus.Fail:\n                this.setState({ message: result.message });\n                break;\n            default:\n                throw new Error(\"Invalid authentication result status.\");\n        }\n    }\n\n    async populateAuthenticationState() {\n        const authenticated = await authService.isAuthenticated();\n        this.setState({ isReady: true, authenticated });\n    }\n\n    getReturnUrl(state) {\n        const params = new URLSearchParams(window.location.search);\n        const fromQuery = params.get(QueryParameterNames.ReturnUrl);\n        if (fromQuery && !fromQuery.startsWith(`${window.location.origin}/`)) {\n            // This is an extra check to prevent open redirects.\n            throw new Error(\"Invalid return url. The return url needs to have the same origin as the current page.\")\n        }\n        return (state && state.returnUrl) ||\n            fromQuery ||\n            `${window.location.origin}${ApplicationPaths.LoggedOut}`;\n    }\n\n    navigateToReturnUrl(returnUrl) {\n        return window.location.replace(returnUrl);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}