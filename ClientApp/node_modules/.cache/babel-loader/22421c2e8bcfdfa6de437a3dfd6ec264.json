{"ast":null,"code":"import { UserManager, WebStorageStateStore } from 'oidc-client';\nimport { ApplicationPaths, ApplicationName } from './ApiAuthorizationConstants';\nexport class AuthorizeService {\n  constructor() {\n    this._callbacks = [];\n    this._nextSubscriptionId = 0;\n    this._user = null;\n    this._isAuthenticated = false;\n    this._popUpDisabled = true;\n  }\n\n  async isAuthenticated() {\n    const user = await this.getUser();\n    return !!user;\n  }\n\n  async getUser() {\n    if (this._user && this._user.profile) {\n      return this._user.profile;\n    }\n\n    await this.ensureUserManagerInitialized();\n    const user = await this.userManager.getUser();\n    return user && user.profile;\n  }\n\n  async getAccessToken() {\n    await this.ensureUserManagerInitialized();\n    const user = await this.userManager.getUser();\n    return user && user.access_token;\n  } // We try to authenticate the user in three different ways:\n  // 1) We try to see if we can authenticate the user silently. This happens\n  //    when the user is already logged in on the IdP and is done using a hidden iframe\n  //    on the client.\n  // 2) We try to authenticate the user using a PopUp Window. This might fail if there is a\n  //    Pop-Up blocker or the user has disabled PopUps.\n  // 3) If the two methods above fail, we redirect the browser to the IdP to perform a traditional\n  //    redirect flow.\n\n\n  async signIn(state) {\n    await this.ensureUserManagerInitialized();\n\n    try {\n      const silentUser = await this.userManager.signinSilent(this.createArguments());\n      this.updateState(silentUser);\n      return this.success(state);\n    } catch (silentError) {\n      // User might not be authenticated, fallback to popup authentication\n      console.log(\"Silent authentication error: \", silentError);\n\n      try {\n        if (this._popUpDisabled) {\n          throw new Error('Popup disabled. Change \\'AuthorizeService.js:AuthorizeService._popupDisabled\\' to false to enable it.');\n        }\n\n        const popUpUser = await this.userManager.signinPopup(this.createArguments());\n        this.updateState(popUpUser);\n        return this.success(state);\n      } catch (popUpError) {\n        if (popUpError.message === \"Popup window closed\") {\n          // The user explicitly cancelled the login action by closing an opened popup.\n          return this.error(\"The user closed the window.\");\n        } else if (!this._popUpDisabled) {\n          console.log(\"Popup authentication error: \", popUpError);\n        } // PopUps might be blocked by the user, fallback to redirect\n\n\n        try {\n          await this.userManager.signinRedirect(this.createArguments(state));\n          return this.redirect();\n        } catch (redirectError) {\n          console.log(\"Redirect authentication error: \", redirectError);\n          return this.error(redirectError);\n        }\n      }\n    }\n  }\n\n  async completeSignIn(url) {\n    try {\n      await this.ensureUserManagerInitialized();\n      const user = await this.userManager.signinCallback(url);\n      this.updateState(user);\n      return this.success(user && user.state);\n    } catch (error) {\n      console.log('There was an error signing in: ', error);\n      return this.error('There was an error signing in.');\n    }\n  } // We try to sign out the user in two different ways:\n  // 1) We try to do a sign-out using a PopUp Window. This might fail if there is a\n  //    Pop-Up blocker or the user has disabled PopUps.\n  // 2) If the method above fails, we redirect the browser to the IdP to perform a traditional\n  //    post logout redirect flow.\n\n\n  async signOut(state) {\n    await this.ensureUserManagerInitialized();\n\n    try {\n      if (this._popUpDisabled) {\n        throw new Error('Popup disabled. Change \\'AuthorizeService.js:AuthorizeService._popupDisabled\\' to false to enable it.');\n      }\n\n      await this.userManager.signoutPopup(this.createArguments());\n      this.updateState(undefined);\n      return this.success(state);\n    } catch (popupSignOutError) {\n      console.log(\"Popup signout error: \", popupSignOutError);\n\n      try {\n        await this.userManager.signoutRedirect(this.createArguments(state));\n        return this.redirect();\n      } catch (redirectSignOutError) {\n        console.log(\"Redirect signout error: \", redirectSignOutError);\n        return this.error(redirectSignOutError);\n      }\n    }\n  }\n\n  async completeSignOut(url) {\n    await this.ensureUserManagerInitialized();\n\n    try {\n      const response = await this.userManager.signoutCallback(url);\n      this.updateState(null);\n      return this.success(response && response.data);\n    } catch (error) {\n      console.log(`There was an error trying to log out '${error}'.`);\n      return this.error(error);\n    }\n  }\n\n  updateState(user) {\n    this._user = user;\n    this._isAuthenticated = !!this._user;\n    this.notifySubscribers();\n  }\n\n  subscribe(callback) {\n    this._callbacks.push({\n      callback,\n      subscription: this._nextSubscriptionId++\n    });\n\n    return this._nextSubscriptionId - 1;\n  }\n\n  unsubscribe(subscriptionId) {\n    const subscriptionIndex = this._callbacks.map((element, index) => element.subscription === subscriptionId ? {\n      found: true,\n      index\n    } : {\n      found: false\n    }).filter(element => element.found === true);\n\n    if (subscriptionIndex.length !== 1) {\n      throw new Error(`Found an invalid number of subscriptions ${subscriptionIndex.length}`);\n    }\n\n    this._callbacks.splice(subscriptionIndex[0].index, 1);\n  }\n\n  notifySubscribers() {\n    for (let i = 0; i < this._callbacks.length; i++) {\n      const callback = this._callbacks[i].callback;\n      callback();\n    }\n  }\n\n  createArguments(state) {\n    return {\n      useReplaceToNavigate: true,\n      data: state\n    };\n  }\n\n  error(message) {\n    return {\n      status: AuthenticationResultStatus.Fail,\n      message\n    };\n  }\n\n  success(state) {\n    return {\n      status: AuthenticationResultStatus.Success,\n      state\n    };\n  }\n\n  redirect() {\n    return {\n      status: AuthenticationResultStatus.Redirect\n    };\n  }\n\n  async ensureUserManagerInitialized() {\n    if (this.userManager !== undefined) {\n      return;\n    }\n\n    let response = await fetch(ApplicationPaths.ApiAuthorizationClientConfigurationUrl);\n\n    if (!response.ok) {\n      throw new Error(`Could not load settings for '${ApplicationName}'`);\n    }\n\n    let settings = await response.json();\n    settings.automaticSilentRenew = true;\n    settings.includeIdTokenInSilentRenew = true;\n    settings.userStore = new WebStorageStateStore({\n      prefix: ApplicationName\n    });\n    this.userManager = new UserManager(settings);\n    this.userManager.events.addUserSignedOut(async () => {\n      await this.userManager.removeUser();\n      this.updateState(undefined);\n    });\n  }\n\n  static get instance() {\n    return authService;\n  }\n\n}\nconst authService = new AuthorizeService();\nexport default authService;\nexport const AuthenticationResultStatus = {\n  Redirect: 'redirect',\n  Success: 'success',\n  Fail: 'fail'\n};","map":{"version":3,"sources":["/Users/skylarsmith/PermitToWorkEPF/ClientApp/src/components/api-authorization/AuthorizeService.js"],"names":["UserManager","WebStorageStateStore","ApplicationPaths","ApplicationName","AuthorizeService","_callbacks","_nextSubscriptionId","_user","_isAuthenticated","_popUpDisabled","isAuthenticated","user","getUser","profile","ensureUserManagerInitialized","userManager","getAccessToken","access_token","signIn","state","silentUser","signinSilent","createArguments","updateState","success","silentError","console","log","Error","popUpUser","signinPopup","popUpError","message","error","signinRedirect","redirect","redirectError","completeSignIn","url","signinCallback","signOut","signoutPopup","undefined","popupSignOutError","signoutRedirect","redirectSignOutError","completeSignOut","response","signoutCallback","data","notifySubscribers","subscribe","callback","push","subscription","unsubscribe","subscriptionId","subscriptionIndex","map","element","index","found","filter","length","splice","i","useReplaceToNavigate","status","AuthenticationResultStatus","Fail","Success","Redirect","fetch","ApiAuthorizationClientConfigurationUrl","ok","settings","json","automaticSilentRenew","includeIdTokenInSilentRenew","userStore","prefix","events","addUserSignedOut","removeUser","instance","authService"],"mappings":"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","sourcesContent":["import { UserManager, WebStorageStateStore } from 'oidc-client';\nimport { ApplicationPaths, ApplicationName } from './ApiAuthorizationConstants';\n\nexport class AuthorizeService {\n    _callbacks = [];\n    _nextSubscriptionId = 0;\n    _user = null;\n    _isAuthenticated = false;\n\n    // By default pop ups are disabled because they don't work properly on Edge.\n    // If you want to enable pop up authentication simply set this flag to false.\n    _popUpDisabled = true;\n\n    async isAuthenticated() {\n        const user = await this.getUser();\n        return !!user;\n    }\n\n    async getUser() {\n        if (this._user && this._user.profile) {\n            return this._user.profile;\n        }\n\n        await this.ensureUserManagerInitialized();\n        const user = await this.userManager.getUser();\n        return user && user.profile;\n    }\n\n    async getAccessToken() {\n        await this.ensureUserManagerInitialized();\n        const user = await this.userManager.getUser();\n        return user && user.access_token;\n    }\n\n    // We try to authenticate the user in three different ways:\n    // 1) We try to see if we can authenticate the user silently. This happens\n    //    when the user is already logged in on the IdP and is done using a hidden iframe\n    //    on the client.\n    // 2) We try to authenticate the user using a PopUp Window. This might fail if there is a\n    //    Pop-Up blocker or the user has disabled PopUps.\n    // 3) If the two methods above fail, we redirect the browser to the IdP to perform a traditional\n    //    redirect flow.\n    async signIn(state) {\n        await this.ensureUserManagerInitialized();\n        try {\n            const silentUser = await this.userManager.signinSilent(this.createArguments());\n            this.updateState(silentUser);\n            return this.success(state);\n        } catch (silentError) {\n            // User might not be authenticated, fallback to popup authentication\n            console.log(\"Silent authentication error: \", silentError);\n\n            try {\n                if (this._popUpDisabled) {\n                    throw new Error('Popup disabled. Change \\'AuthorizeService.js:AuthorizeService._popupDisabled\\' to false to enable it.')\n                }\n\n                const popUpUser = await this.userManager.signinPopup(this.createArguments());\n                this.updateState(popUpUser);\n                return this.success(state);\n            } catch (popUpError) {\n                if (popUpError.message === \"Popup window closed\") {\n                    // The user explicitly cancelled the login action by closing an opened popup.\n                    return this.error(\"The user closed the window.\");\n                } else if (!this._popUpDisabled) {\n                    console.log(\"Popup authentication error: \", popUpError);\n                }\n\n                // PopUps might be blocked by the user, fallback to redirect\n                try {\n                    await this.userManager.signinRedirect(this.createArguments(state));\n                    return this.redirect();\n                } catch (redirectError) {\n                    console.log(\"Redirect authentication error: \", redirectError);\n                    return this.error(redirectError);\n                }\n            }\n        }\n    }\n\n    async completeSignIn(url) {\n        try {\n            await this.ensureUserManagerInitialized();\n            const user = await this.userManager.signinCallback(url);\n            this.updateState(user);\n            return this.success(user && user.state);\n        } catch (error) {\n            console.log('There was an error signing in: ', error);\n            return this.error('There was an error signing in.');\n        }\n    }\n\n    // We try to sign out the user in two different ways:\n    // 1) We try to do a sign-out using a PopUp Window. This might fail if there is a\n    //    Pop-Up blocker or the user has disabled PopUps.\n    // 2) If the method above fails, we redirect the browser to the IdP to perform a traditional\n    //    post logout redirect flow.\n    async signOut(state) {\n        await this.ensureUserManagerInitialized();\n        try {\n            if (this._popUpDisabled) {\n                throw new Error('Popup disabled. Change \\'AuthorizeService.js:AuthorizeService._popupDisabled\\' to false to enable it.')\n            }\n\n            await this.userManager.signoutPopup(this.createArguments());\n            this.updateState(undefined);\n            return this.success(state);\n        } catch (popupSignOutError) {\n            console.log(\"Popup signout error: \", popupSignOutError);\n            try {\n                await this.userManager.signoutRedirect(this.createArguments(state));\n                return this.redirect();\n            } catch (redirectSignOutError) {\n                console.log(\"Redirect signout error: \", redirectSignOutError);\n                return this.error(redirectSignOutError);\n            }\n        }\n    }\n\n    async completeSignOut(url) {\n        await this.ensureUserManagerInitialized();\n        try {\n            const response = await this.userManager.signoutCallback(url);\n            this.updateState(null);\n            return this.success(response && response.data);\n        } catch (error) {\n            console.log(`There was an error trying to log out '${error}'.`);\n            return this.error(error);\n        }\n    }\n\n    updateState(user) {\n        this._user = user;\n        this._isAuthenticated = !!this._user;\n        this.notifySubscribers();\n    }\n\n    subscribe(callback) {\n        this._callbacks.push({ callback, subscription: this._nextSubscriptionId++ });\n        return this._nextSubscriptionId - 1;\n    }\n\n    unsubscribe(subscriptionId) {\n        const subscriptionIndex = this._callbacks\n            .map((element, index) => element.subscription === subscriptionId ? { found: true, index } : { found: false })\n            .filter(element => element.found === true);\n        if (subscriptionIndex.length !== 1) {\n            throw new Error(`Found an invalid number of subscriptions ${subscriptionIndex.length}`);\n        }\n\n        this._callbacks.splice(subscriptionIndex[0].index, 1);\n    }\n\n    notifySubscribers() {\n        for (let i = 0; i < this._callbacks.length; i++) {\n            const callback = this._callbacks[i].callback;\n            callback();\n        }\n    }\n\n    createArguments(state) {\n        return { useReplaceToNavigate: true, data: state };\n    }\n\n    error(message) {\n        return { status: AuthenticationResultStatus.Fail, message };\n    }\n\n    success(state) {\n        return { status: AuthenticationResultStatus.Success, state };\n    }\n\n    redirect() {\n        return { status: AuthenticationResultStatus.Redirect };\n    }\n\n    async ensureUserManagerInitialized() {\n        if (this.userManager !== undefined) {\n            return;\n        }\n\n        let response = await fetch(ApplicationPaths.ApiAuthorizationClientConfigurationUrl);\n        if (!response.ok) {\n            throw new Error(`Could not load settings for '${ApplicationName}'`);\n        }\n\n        let settings = await response.json();\n        settings.automaticSilentRenew = true;\n        settings.includeIdTokenInSilentRenew = true;\n        settings.userStore = new WebStorageStateStore({\n            prefix: ApplicationName\n        });\n\n        this.userManager = new UserManager(settings);\n\n        this.userManager.events.addUserSignedOut(async () => {\n            await this.userManager.removeUser();\n            this.updateState(undefined);\n        });\n    }\n\n    static get instance() { return authService }\n}\n\nconst authService = new AuthorizeService();\n\nexport default authService;\n\nexport const AuthenticationResultStatus = {\n    Redirect: 'redirect',\n    Success: 'success',\n    Fail: 'fail'\n};\n"]},"metadata":{},"sourceType":"module"}