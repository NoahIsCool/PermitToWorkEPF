{"version":3,"sources":["components/api-authorization/ApiAuthorizationConstants.js","components/api-authorization/AuthorizeService.js","components/NavMenu.js","components/api-authorization/LoginMenu.js","components/Layout.js","components/Admin.js","components/Calendar.js","components/CheckIn.js","components/api-authorization/Login.js","components/api-authorization/Logout.js","components/api-authorization/ApiAuthorizationRoutes.js","App.js","serviceWorker.js","index.js"],"names":["QueryParameterNames","LogoutActions","LoginActions","prefix","ApplicationPaths","DefaultLoginRedirectPath","ApiAuthorizationClientConfigurationUrl","ApiAuthorizationPrefix","Login","LoginFailed","LoginCallback","Register","Profile","LogOut","LoggedOut","LogOutCallback","IdentityRegisterPath","IdentityManagePath","authService","_callbacks","_nextSubscriptionId","_user","_isAuthenticated","_popUpDisabled","this","getUser","user","profile","ensureUserManagerInitialized","userManager","access_token","state","signinSilent","createArguments","silentUser","updateState","success","console","log","Error","signinPopup","popUpUser","message","error","signinRedirect","redirect","url","signinCallback","signoutPopup","undefined","signoutRedirect","signoutCallback","response","data","notifySubscribers","callback","push","subscription","subscriptionId","subscriptionIndex","map","element","index","found","filter","length","splice","i","useReplaceToNavigate","status","AuthenticationResultStatus","Fail","Success","Redirect","fetch","ok","json","settings","automaticSilentRenew","includeIdTokenInSilentRenew","userStore","WebStorageStateStore","UserManager","events","addUserSignedOut","a","async","removeUser","NavMenu","Component","props","toggleNavbar","bind","collapsed","setState","class","href","displayName","name","Layout","Container","children","Admin","className","type","value","Calendar","CheckIn","style","textAlign","paddingRight","paddingTop","border","disabled","action","login","getReturnUrl","processLoginCallback","URLSearchParams","window","location","search","get","redirectToProfile","redirectToRegister","returnUrl","signIn","result","navigateToReturnUrl","completeSignIn","fromQuery","startsWith","origin","redirectToApiAuthorizationPath","encodeURI","apiAuthorizationPath","redirectUrl","replace","Logout","isReady","authenticated","history","local","logout","processLogoutCallback","populateAuthenticationState","isAuthenticated","signOut","completeSignOut","ApiAuthorizationRoutes","path","render","loginAction","logoutAction","App","component","exact","Boolean","hostname","match","rootElement","document","getElementById","ReactDOM","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9bc57ac6.chunk.js","sourcesContent":["export const ApplicationName = 'tmp';\n\nexport const QueryParameterNames = {\n  ReturnUrl: 'returnUrl',\n  Message: 'message'\n};\n\nexport const LogoutActions = {\n  LogoutCallback: 'logout-callback',\n  Logout: 'logout',\n  LoggedOut: 'logged-out'\n};\n\nexport const LoginActions = {\n  Login: 'login',\n  LoginCallback: 'login-callback',\n  LoginFailed: 'login-failed',\n  Profile: 'profile',\n  Register: 'register'\n};\n\nconst prefix = '/authentication';\n\nexport const ApplicationPaths = {\n  DefaultLoginRedirectPath: '/',\n  ApiAuthorizationClientConfigurationUrl: `/_configuration/${ApplicationName}`,\n  ApiAuthorizationPrefix: prefix,\n  Login: `${prefix}/${LoginActions.Login}`,\n  LoginFailed: `${prefix}/${LoginActions.LoginFailed}`,\n  LoginCallback: `${prefix}/${LoginActions.LoginCallback}`,\n  Register: `${prefix}/${LoginActions.Register}`,\n  Profile: `${prefix}/${LoginActions.Profile}`,\n  LogOut: `${prefix}/${LogoutActions.Logout}`,\n  LoggedOut: `${prefix}/${LogoutActions.LoggedOut}`,\n  LogOutCallback: `${prefix}/${LogoutActions.LogoutCallback}`,\n  IdentityRegisterPath: '/Identity/Account/Register',\n  IdentityManagePath: '/Identity/Account/Manage'\n};\n","import { UserManager, WebStorageStateStore } from 'oidc-client';\nimport { ApplicationPaths, ApplicationName } from './ApiAuthorizationConstants';\n\nexport class AuthorizeService {\n    _callbacks = [];\n    _nextSubscriptionId = 0;\n    _user = null;\n    _isAuthenticated = false;\n\n    // By default pop ups are disabled because they don't work properly on Edge.\n    // If you want to enable pop up authentication simply set this flag to false.\n    _popUpDisabled = true;\n\n    async isAuthenticated() {\n        const user = await this.getUser();\n        return !!user;\n    }\n\n    async getUser() {\n        if (this._user && this._user.profile) {\n            return this._user.profile;\n        }\n\n        await this.ensureUserManagerInitialized();\n        const user = await this.userManager.getUser();\n        return user && user.profile;\n    }\n\n    async getAccessToken() {\n        await this.ensureUserManagerInitialized();\n        const user = await this.userManager.getUser();\n        return user && user.access_token;\n    }\n\n    // We try to authenticate the user in three different ways:\n    // 1) We try to see if we can authenticate the user silently. This happens\n    //    when the user is already logged in on the IdP and is done using a hidden iframe\n    //    on the client.\n    // 2) We try to authenticate the user using a PopUp Window. This might fail if there is a\n    //    Pop-Up blocker or the user has disabled PopUps.\n    // 3) If the two methods above fail, we redirect the browser to the IdP to perform a traditional\n    //    redirect flow.\n    async signIn(state) {\n        await this.ensureUserManagerInitialized();\n        try {\n            const silentUser = await this.userManager.signinSilent(this.createArguments());\n            this.updateState(silentUser);\n            return this.success(state);\n        } catch (silentError) {\n            // User might not be authenticated, fallback to popup authentication\n            console.log(\"Silent authentication error: \", silentError);\n\n            try {\n                if (this._popUpDisabled) {\n                    throw new Error('Popup disabled. Change \\'AuthorizeService.js:AuthorizeService._popupDisabled\\' to false to enable it.')\n                }\n\n                const popUpUser = await this.userManager.signinPopup(this.createArguments());\n                this.updateState(popUpUser);\n                return this.success(state);\n            } catch (popUpError) {\n                if (popUpError.message === \"Popup window closed\") {\n                    // The user explicitly cancelled the login action by closing an opened popup.\n                    return this.error(\"The user closed the window.\");\n                } else if (!this._popUpDisabled) {\n                    console.log(\"Popup authentication error: \", popUpError);\n                }\n\n                // PopUps might be blocked by the user, fallback to redirect\n                try {\n                    await this.userManager.signinRedirect(this.createArguments(state));\n                    return this.redirect();\n                } catch (redirectError) {\n                    console.log(\"Redirect authentication error: \", redirectError);\n                    return this.error(redirectError);\n                }\n            }\n        }\n    }\n\n    async completeSignIn(url) {\n        try {\n            await this.ensureUserManagerInitialized();\n            const user = await this.userManager.signinCallback(url);\n            this.updateState(user);\n            return this.success(user && user.state);\n        } catch (error) {\n            console.log('There was an error signing in: ', error);\n            return this.error('There was an error signing in.');\n        }\n    }\n\n    // We try to sign out the user in two different ways:\n    // 1) We try to do a sign-out using a PopUp Window. This might fail if there is a\n    //    Pop-Up blocker or the user has disabled PopUps.\n    // 2) If the method above fails, we redirect the browser to the IdP to perform a traditional\n    //    post logout redirect flow.\n    async signOut(state) {\n        await this.ensureUserManagerInitialized();\n        try {\n            if (this._popUpDisabled) {\n                throw new Error('Popup disabled. Change \\'AuthorizeService.js:AuthorizeService._popupDisabled\\' to false to enable it.')\n            }\n\n            await this.userManager.signoutPopup(this.createArguments());\n            this.updateState(undefined);\n            return this.success(state);\n        } catch (popupSignOutError) {\n            console.log(\"Popup signout error: \", popupSignOutError);\n            try {\n                await this.userManager.signoutRedirect(this.createArguments(state));\n                return this.redirect();\n            } catch (redirectSignOutError) {\n                console.log(\"Redirect signout error: \", redirectSignOutError);\n                return this.error(redirectSignOutError);\n            }\n        }\n    }\n\n    async completeSignOut(url) {\n        await this.ensureUserManagerInitialized();\n        try {\n            const response = await this.userManager.signoutCallback(url);\n            this.updateState(null);\n            return this.success(response && response.data);\n        } catch (error) {\n            console.log(`There was an error trying to log out '${error}'.`);\n            return this.error(error);\n        }\n    }\n\n    updateState(user) {\n        this._user = user;\n        this._isAuthenticated = !!this._user;\n        this.notifySubscribers();\n    }\n\n    subscribe(callback) {\n        this._callbacks.push({ callback, subscription: this._nextSubscriptionId++ });\n        return this._nextSubscriptionId - 1;\n    }\n\n    unsubscribe(subscriptionId) {\n        const subscriptionIndex = this._callbacks\n            .map((element, index) => element.subscription === subscriptionId ? { found: true, index } : { found: false })\n            .filter(element => element.found === true);\n        if (subscriptionIndex.length !== 1) {\n            throw new Error(`Found an invalid number of subscriptions ${subscriptionIndex.length}`);\n        }\n\n        this._callbacks.splice(subscriptionIndex[0].index, 1);\n    }\n\n    notifySubscribers() {\n        for (let i = 0; i < this._callbacks.length; i++) {\n            const callback = this._callbacks[i].callback;\n            callback();\n        }\n    }\n\n    createArguments(state) {\n        return { useReplaceToNavigate: true, data: state };\n    }\n\n    error(message) {\n        return { status: AuthenticationResultStatus.Fail, message };\n    }\n\n    success(state) {\n        return { status: AuthenticationResultStatus.Success, state };\n    }\n\n    redirect() {\n        return { status: AuthenticationResultStatus.Redirect };\n    }\n\n    async ensureUserManagerInitialized() {\n        if (this.userManager !== undefined) {\n            return;\n        }\n\n        let response = await fetch(ApplicationPaths.ApiAuthorizationClientConfigurationUrl);\n        if (!response.ok) {\n            throw new Error(`Could not load settings for '${ApplicationName}'`);\n        }\n\n        let settings = await response.json();\n        settings.automaticSilentRenew = true;\n        settings.includeIdTokenInSilentRenew = true;\n        settings.userStore = new WebStorageStateStore({\n            prefix: ApplicationName\n        });\n\n        this.userManager = new UserManager(settings);\n\n        this.userManager.events.addUserSignedOut(async () => {\n            await this.userManager.removeUser();\n            this.updateState(undefined);\n        });\n    }\n\n    static get instance() { return authService }\n}\n\nconst authService = new AuthorizeService();\n\nexport default authService;\n\nexport const AuthenticationResultStatus = {\n    Redirect: 'redirect',\n    Success: 'success',\n    Fail: 'fail'\n};\n","import React, { Component } from 'react';\nimport { Collapse, Container, Navbar, NavbarBrand, NavbarToggler, NavItem, NavLink } from 'reactstrap';\nimport { Link } from 'react-router-dom';\nimport { LoginMenu } from './api-authorization/LoginMenu';\nimport './NavMenu.css';\n\nexport class NavMenu extends Component {\n  static displayName = NavMenu.name;\n\n  constructor (props) {\n    super(props);\n\n    this.toggleNavbar = this.toggleNavbar.bind(this);\n    this.state = {\n      collapsed: true\n    };\n  }\n\n  toggleNavbar () {\n    this.setState({\n      collapsed: !this.state.collapsed\n    });\n  }\n\n  render () {\n    return (\n    <div class=\"topnav\">\n      <a href=\"/\">Check IN</a>\n      <a href=\"/Calendar\">Calendar</a>\n      <a href=\"/Admin\">Admin</a>\n      <a href=\"/login\">login</a>\n    </div>\n\n    );\n  }\n}\n","import React, { Component, Fragment } from 'react';\nimport { NavItem, NavLink } from 'reactstrap';\nimport { Link } from 'react-router-dom';\nimport authService from './AuthorizeService';\nimport { ApplicationPaths } from './ApiAuthorizationConstants';\n\nexport class LoginMenu extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isAuthenticated: false,\n            userName: null\n        };\n    }\n\n    componentDidMount() {\n        this._subscription = authService.subscribe(() => this.populateState());\n        this.populateState();\n    }\n\n    componentWillUnmount() {\n        authService.unsubscribe(this._subscription);\n    }\n\n    async populateState() {\n        const [isAuthenticated, user] = await Promise.all([authService.isAuthenticated(), authService.getUser()])\n        this.setState({\n            isAuthenticated,\n            userName: user && user.name\n        });\n    }\n\n    render() {\n        const { isAuthenticated, userName } = this.state;\n        if (!isAuthenticated) {\n            const registerPath = `${ApplicationPaths.Register}`;\n            const loginPath = `${ApplicationPaths.Login}`;\n            return this.anonymousView(registerPath, loginPath);\n        } else {\n            const profilePath = `${ApplicationPaths.Profile}`;\n            const logoutPath = { pathname: `${ApplicationPaths.LogOut}`, state: { local: true } };\n            return this.authenticatedView(userName, profilePath, logoutPath);\n        }\n    }\n\n    authenticatedView(userName, profilePath, logoutPath) {\n        return (<Fragment>\n            <NavItem>\n                <NavLink tag={Link} className=\"text-dark\" to={profilePath}>Hello {userName}</NavLink>\n            </NavItem>\n            <NavItem>\n                <NavLink tag={Link} className=\"text-dark\" to={logoutPath}>Logout</NavLink>\n            </NavItem>\n        </Fragment>);\n\n    }\n\n    anonymousView(registerPath, loginPath) {\n        return (<Fragment>\n            <NavItem>\n                <NavLink tag={Link} className=\"text-dark\" to={registerPath}>Register</NavLink>\n            </NavItem>\n            <NavItem>\n                <NavLink tag={Link} className=\"text-dark\" to={loginPath}>Login</NavLink>\n            </NavItem>\n        </Fragment>);\n    }\n}\n","import React, { Component } from 'react';\nimport { Container } from 'reactstrap';\nimport { NavMenu } from './NavMenu';\n\nexport class Layout extends Component {\n  static displayName = Layout.name;\n\n  render () {\n    return (\n      <div>\n        <NavMenu />\n        <Container>\n          {this.props.children}\n        </Container>\n      </div>\n    );\n  }\n}\n","import React, {Component} from 'react';\n\nexport class Admin extends Component {\n\trender () {\n\t\treturn (\n\t\t<div className=\"Admin\">\n\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<div class=\"column\">\n\t\t\t\t\t\t<h2>Admin</h2>\n\t\t\t\t\t\t<input type=\"button\" value=\"Import Users\" />\n\t\t\t\t\t\t<input type=\"button\" value=\"Export Users\" />\n\t\t\t\t\t\t<input type=\"button\" value=\"Import Calendar\" />\n\t\t\t\t\t\t<input type=\"button\" value=\"Export Calendar\" />\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<h2>Users</h2>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<input type=\"button\" value=\"Add\" />\n\t\t\t\t\t\t<input type=\"button\" value=\"Remove\" />\n\t\t\t\t\t</div>\n\t\t\t\t\t<table>\n\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t<tr><th></th><th>Name</th><th>Id</th><th>Team</th><th>Graduation</th><th>Last Chrck in</th></tr>\n\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t<tr><td><input type=\"button\" value=\"user\" /></td><td>Tim </td>  <td>123456</td><td>Rover</td><td>1919</td><td>01/10/2020</td></tr>\n\t\t\t\t\t\t\t<tr><td><input type=\"button\" value=\"user\" /></td><td>Bob </td>  <td>789101</td><td>SRC</td><td>2020</td><td>01/01/1918</td></tr>\n\t\t\t\t\t\t\t<tr><td><input type=\"button\" value=\"user\" /></td><td>Landes</td><td>121314</td><td>Rovket</td><td>2025</td><td>03/05/2005</td></tr>\n\t\t\t\t\t\t</tbody>\n\t\t\t\t\t</table>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"footer\">\n\t\t\t\t\t<p>Footer</p>\n\t\t\t\t</div> \n\t\t</div>\n\t);}\n}\n","import React, { Component } from 'react';\n\nexport class Calendar extends Component {\n\n    render () {\n        return (\n            <div>\n                <h1>FUGG WHERE'D THE CALENDAR GO, world!</h1>\n                <p>Welcome to your new single-page application, built with:</p>\n                <ul>\n                    <li><a href='https://get.asp.net/'>ASP.NET Core</a> and <a href='https://msdn.microsoft.com/en-us/library/67ef8sbd.aspx'>C#</a> for cross-platform server-side code</li>\n                    <li><a href='https://facebook.github.io/react/'>React</a> for client-side code</li>\n                    <li><a href='http://getbootstrap.com/'>Bootstrap</a> for layout and styling</li>\n                </ul>\n                <p>To help you get started, we have also set up:</p>\n                <ul>\n                    <li><strong>Client-side navigation</strong>. For example, click <em>Counter</em> then <em>Back</em> to return here.</li>\n                    <li><strong>Development server integration</strong>. In development mode, the development server from <code>create-react-app</code> runs in the background automatically, so your client-side resources are dynamically built on demand and the page refreshes when you modify any file.</li>\n                    <li><strong>Efficient production builds</strong>. In production mode, development-time features are disabled, and your <code>dotnet publish</code> configuration produces minified, efficiently bundled JavaScript files.</li>\n                </ul>\n                <p>The <code>ClientApp</code> subdirectory is a standard React application based on the <code>create-react-app</code> template. If you open a command prompt in that directory, you can run <code>npm</code> commands such as <code>npm test</code> or <code>npm install</code>.</p>\n            </div>\n        );\n    }\n}","import React, { Component } from 'react';\nimport './CheckIn.css';\n\nexport class CheckIn extends Component{\n\trender() {\n\t\treturn (\n\n\t\t\t<div className=\"CheckIn\">\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<div class=\"column\" style={{textAlign: 'right'}}>\n\t\t\t\t\t\t<p style={{paddingRight: '10px', paddingTop:'4%'}}>\n\t\t\t\t\t\t\tMachines\n\t\t\t\t\t\t</p>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"column\">\n\t\t\t\t\t\t<div style={{paddingTop: '4%'}}>\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<form>\n\t\t\t\t\t\t\t\t\tStudent ID:\n\t\t\t\t\t\t\t\t\t<input type=\"text\" name=\"student ID\" /> <br />\n\t\t\t\t\t\t\t\t\t<div class=\"ckbox\"style={{border: 'solid'}}>\n\t\t\t\t\t\t\t\t\t\t<input type=\"checkbox\" name=\"lathe 1\" /> Lathe 1 <br />\n\t\t\t\t\t\t\t\t\t\t<input type=\"checkbox\" name=\"lathe 2\" /> Lathe 2<br />\n\t\t\t\t\t\t\t\t\t\t<input type=\"checkbox\" name=\"mill 1\" /> Mill 1<br />\n\t\t\t\t\t\t\t\t\t\t<input type=\"checkbox\" name=\"mill 2\" /> Mill 2<br />\n\t\t\t\t\t\t\t\t\t\t<input type=\"checkbox\" name=\"cnc plasma\" disabled /> <s>CNC Plasma</s> (Checked Out: Tommy Mai 1/15/2020 2:00pm) <br />\n\t\t\t\t\t\t\t\t\t\t<input type=\"checkbox\" name=\"welder\" /> Welders<br />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<input type=\"button\" name=\"checkIn\" value=\"Check In\" />\n\t\t\t\t\t\t\t\t\t<input type=\"button\" name=\"checkOut\" value=\"Check Out\" />\n\t\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div></div>\n\n\t\t);\n\t} \n}\n","import React from 'react'\nimport { Component } from 'react';\nimport authService from './AuthorizeService';\nimport { AuthenticationResultStatus } from './AuthorizeService';\nimport { LoginActions, QueryParameterNames, ApplicationPaths } from './ApiAuthorizationConstants';\n\n// The main responsibility of this component is to handle the user's login process.\n// This is the starting point for the login process. Any component that needs to authenticate\n// a user can simply perform a redirect to this component with a returnUrl query parameter and\n// let the component perform the login and return back to the return url.\nexport class Login extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            message: undefined\n        };\n    }\n\n    componentDidMount() {\n        const action = this.props.action;\n        switch (action) {\n            case LoginActions.Login:\n                this.login(this.getReturnUrl());\n                break;\n            case LoginActions.LoginCallback:\n                this.processLoginCallback();\n                break;\n            case LoginActions.LoginFailed:\n                const params = new URLSearchParams(window.location.search);\n                const error = params.get(QueryParameterNames.Message);\n                this.setState({ message: error });\n                break;\n            case LoginActions.Profile:\n                this.redirectToProfile();\n                break;\n            case LoginActions.Register:\n                this.redirectToRegister();\n                break;\n            default:\n                throw new Error(`Invalid action '${action}'`);\n        }\n    }\n\n    render() {\n        const action = this.props.action;\n        const { message } = this.state;\n\n        if (!!message) {\n            return <div>{message}</div>\n        } else {\n            switch (action) {\n                case LoginActions.Login:\n                    return (<div>Processing login</div>);\n                case LoginActions.LoginCallback:\n                    return (<div>Processing login callback</div>);\n                case LoginActions.Profile:\n                case LoginActions.Register:\n                    return (<div></div>);\n                default:\n                    throw new Error(`Invalid action '${action}'`);\n            }\n        }\n    }\n\n    async login(returnUrl) {\n        const state = { returnUrl };\n        const result = await authService.signIn(state);\n        switch (result.status) {\n            case AuthenticationResultStatus.Redirect:\n                break;\n            case AuthenticationResultStatus.Success:\n                await this.navigateToReturnUrl(returnUrl);\n                break;\n            case AuthenticationResultStatus.Fail:\n                this.setState({ message: result.message });\n                break;\n            default:\n                throw new Error(`Invalid status result ${result.status}.`);\n        }\n    }\n\n    async processLoginCallback() {\n        const url = window.location.href;\n        const result = await authService.completeSignIn(url);\n        switch (result.status) {\n            case AuthenticationResultStatus.Redirect:\n                // There should not be any redirects as the only time completeSignIn finishes\n                // is when we are doing a redirect sign in flow.\n                throw new Error('Should not redirect.');\n            case AuthenticationResultStatus.Success:\n                await this.navigateToReturnUrl(this.getReturnUrl(result.state));\n                break;\n            case AuthenticationResultStatus.Fail:\n                this.setState({ message: result.message });\n                break;\n            default:\n                throw new Error(`Invalid authentication result status '${result.status}'.`);\n        }\n    }\n\n    getReturnUrl(state) {\n        const params = new URLSearchParams(window.location.search);\n        const fromQuery = params.get(QueryParameterNames.ReturnUrl);\n        if (fromQuery && !fromQuery.startsWith(`${window.location.origin}/`)) {\n            // This is an extra check to prevent open redirects.\n            throw new Error(\"Invalid return url. The return url needs to have the same origin as the current page.\")\n        }\n        return (state && state.returnUrl) || fromQuery || `${window.location.origin}/`;\n    }\n\n    redirectToRegister() {\n        this.redirectToApiAuthorizationPath(`${ApplicationPaths.IdentityRegisterPath}?${QueryParameterNames.ReturnUrl}=${encodeURI(ApplicationPaths.Login)}`);\n    }\n\n    redirectToProfile() {\n        this.redirectToApiAuthorizationPath(ApplicationPaths.IdentityManagePath);\n    }\n\n    redirectToApiAuthorizationPath(apiAuthorizationPath) {\n        const redirectUrl = `${window.location.origin}${apiAuthorizationPath}`;\n        // It's important that we do a replace here so that when the user hits the back arrow on the\n        // browser he gets sent back to where it was on the app instead of to an endpoint on this\n        // component.\n        window.location.replace(redirectUrl);\n    }\n\n    navigateToReturnUrl(returnUrl) {\n        // It's important that we do a replace here so that we remove the callback uri with the\n        // fragment containing the tokens from the browser history.\n        window.location.replace(returnUrl);\n    }\n}\n","import React from 'react'\nimport { Component } from 'react';\nimport authService from './AuthorizeService';\nimport { AuthenticationResultStatus } from './AuthorizeService';\nimport { QueryParameterNames, LogoutActions, ApplicationPaths } from './ApiAuthorizationConstants';\n\n// The main responsibility of this component is to handle the user's logout process.\n// This is the starting point for the logout process, which is usually initiated when a\n// user clicks on the logout button on the LoginMenu component.\nexport class Logout extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            message: undefined,\n            isReady: false,\n            authenticated: false\n        };\n    }\n\n    componentDidMount() {\n        const action = this.props.action;\n        switch (action) {\n            case LogoutActions.Logout:\n                if (!!window.history.state.state.local) {\n                    this.logout(this.getReturnUrl());\n                } else {\n                    // This prevents regular links to <app>/authentication/logout from triggering a logout\n                    this.setState({ isReady: true, message: \"The logout was not initiated from within the page.\" });\n                }\n                break;\n            case LogoutActions.LogoutCallback:\n                this.processLogoutCallback();\n                break;\n            case LogoutActions.LoggedOut:\n                this.setState({ isReady: true, message: \"You successfully logged out!\" });\n                break;\n            default:\n                throw new Error(`Invalid action '${action}'`);\n        }\n\n        this.populateAuthenticationState();\n    }\n\n    render() {\n        const { isReady, message } = this.state;\n        if (!isReady) {\n            return <div></div>\n        }\n        if (!!message) {\n            return (<div>{message}</div>);\n        } else {\n            const action = this.props.action;\n            switch (action) {\n                case LogoutActions.Logout:\n                    return (<div>Processing logout</div>);\n                case LogoutActions.LogoutCallback:\n                    return (<div>Processing logout callback</div>);\n                case LogoutActions.LoggedOut:\n                    return (<div>{message}</div>);\n                default:\n                    throw new Error(`Invalid action '${action}'`);\n            }\n        }\n    }\n\n    async logout(returnUrl) {\n        const state = { returnUrl };\n        const isauthenticated = await authService.isAuthenticated();\n        if (isauthenticated) {\n            const result = await authService.signOut(state);\n            switch (result.status) {\n                case AuthenticationResultStatus.Redirect:\n                    break;\n                case AuthenticationResultStatus.Success:\n                    await this.navigateToReturnUrl(returnUrl);\n                    break;\n                case AuthenticationResultStatus.Fail:\n                    this.setState({ message: result.message });\n                    break;\n                default:\n                    throw new Error(\"Invalid authentication result status.\");\n            }\n        } else {\n            this.setState({ message: \"You successfully logged out!\" });\n        }\n    }\n\n    async processLogoutCallback() {\n        const url = window.location.href;\n        const result = await authService.completeSignOut(url);\n        switch (result.status) {\n            case AuthenticationResultStatus.Redirect:\n                // There should not be any redirects as the only time completeAuthentication finishes\n                // is when we are doing a redirect sign in flow.\n                throw new Error('Should not redirect.');\n            case AuthenticationResultStatus.Success:\n                await this.navigateToReturnUrl(this.getReturnUrl(result.state));\n                break;\n            case AuthenticationResultStatus.Fail:\n                this.setState({ message: result.message });\n                break;\n            default:\n                throw new Error(\"Invalid authentication result status.\");\n        }\n    }\n\n    async populateAuthenticationState() {\n        const authenticated = await authService.isAuthenticated();\n        this.setState({ isReady: true, authenticated });\n    }\n\n    getReturnUrl(state) {\n        const params = new URLSearchParams(window.location.search);\n        const fromQuery = params.get(QueryParameterNames.ReturnUrl);\n        if (fromQuery && !fromQuery.startsWith(`${window.location.origin}/`)) {\n            // This is an extra check to prevent open redirects.\n            throw new Error(\"Invalid return url. The return url needs to have the same origin as the current page.\")\n        }\n        return (state && state.returnUrl) ||\n            fromQuery ||\n            `${window.location.origin}${ApplicationPaths.LoggedOut}`;\n    }\n\n    navigateToReturnUrl(returnUrl) {\n        return window.location.replace(returnUrl);\n    }\n}\n","import React, { Component, Fragment } from 'react';\nimport { Route } from 'react-router';\nimport { Login } from './Login'\nimport { Logout } from './Logout'\nimport { ApplicationPaths, LoginActions, LogoutActions } from './ApiAuthorizationConstants';\n\nexport default class ApiAuthorizationRoutes extends Component {\n\n  render () {\n    return(\n      <Fragment>\n          <Route path={ApplicationPaths.Login} render={() => loginAction(LoginActions.Login)} />\n          <Route path={ApplicationPaths.LoginFailed} render={() => loginAction(LoginActions.LoginFailed)} />\n          <Route path={ApplicationPaths.LoginCallback} render={() => loginAction(LoginActions.LoginCallback)} />\n          <Route path={ApplicationPaths.Profile} render={() => loginAction(LoginActions.Profile)} />\n          <Route path={ApplicationPaths.Register} render={() => loginAction(LoginActions.Register)} />\n          <Route path={ApplicationPaths.LogOut} render={() => logoutAction(LogoutActions.Logout)} />\n          <Route path={ApplicationPaths.LogOutCallback} render={() => logoutAction(LogoutActions.LogoutCallback)} />\n          <Route path={ApplicationPaths.LoggedOut} render={() => logoutAction(LogoutActions.LoggedOut)} />\n      </Fragment>);\n  }\n}\n\nfunction loginAction(name){\n    return (<Login action={name}></Login>);\n}\n\nfunction logoutAction(name) {\n    return (<Logout action={name}></Logout>);\n}\n","import React, { Component } from 'react';\nimport { Route } from 'react-router';\nimport { Layout } from './components/Layout';\nimport { Admin } from './components/Admin';\nimport { Calendar } from './components/Calendar';\nimport { CheckIn } from './components/CheckIn';\nimport ApiAuthorizationRoutes from './components/api-authorization/ApiAuthorizationRoutes';\nimport { ApplicationPaths } from './components/api-authorization/ApiAuthorizationConstants';\n\nimport './custom.css'\n\nexport default class App extends Component {\n  static displayName = App.name;\n\n  render () {\n    return (\n      <Layout>\n        <Route path='/Admin' component={Admin} />\n        <Route path={ApplicationPaths.ApiAuthorizationPrefix} component={ApiAuthorizationRoutes} />\n\t      <Route path='/Calendar' component={Calendar}/>\n\t      <Route exact path='/' component={CheckIn}/>\n      </Layout>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport './Admin.css'\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\nconst rootElement = document.getElementById('root');\n\nReactDOM.render(\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>,\n    rootElement);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}